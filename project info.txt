Actors:
1.Department Administrator
2.Department Co-ordinator
3.Supervisor
4.Student

Functional Requirements List Along with system Requirement:

Department Administrator
--------------------
1.he can create supervisor account
    1.1 supervisor could sent a demo request to dept. administrator
    1.2 dept administrator create default account for supervisor
        1.2.1 using user email
        1.2.2 a default password
    1.3 system will sent default username,password to corresponding email
    
2.Admin can see all students details and list
    2.1 click on students from admin panel menu
    2.2 a controller method will be called
    2.3 from there a rest controller method will be called,returned ArrayList of students

3.Dept. Admin can see all supervisor list
    3.1 click on supervisor link from menu navigation
    3.2 called admin/supervisors in controller , autowired SupervisorService bean
    3.3 Made Supervisor domain object
    3.4 Create SupervisorService
    3.5 Create SupervisorServiceImpl
    3.6 inside SupervisorServiceImpl ,autowired SupervisorRepository
    3.7 Create SupervisorRepository interface
    3.8 Create SupervisorRepositoryImple
    3.9 in SupervisorRepositoryImple ,autowired NamedParameterJdbcTemplate
    3.10 create table,insert data
    3.11 load those two file in RootApplicationContexConfiguration,if those two file
          already not exists
    3.12 implemented mapRow method inside inner class
    3.13 return to controller step by step 
    3.14 in controller add those returned object to model atrribute
    3.15 display data in jsp,run forEach loop
    3.16 done

4. Dept. Admin can change student supervisor
    4.1 click on change supervisor
    4.2 search by student id,input student id
    4.3 Ajax call will be called
        4.3.1 https://www.technicalkeeda.com/spring-tutorials/spring-framework-jquery-ajax-request-and-json-response-example
        4.3.2 Help took from the above example
    4.4 Create a ChangeSupervisorDTO
        4.4.1 DTO will contain studentId,name,supervisorId,supervisor name,List of 
              available supervisor along with their id,name
    4.5 Create AdminRestController if not existed
    4.6 Create AdminService if not existed
    4.7 Create AdminRepository if not existed
    4.8 for @autowired purpose ,create service and repository bean
    4.9 AdminService is may use other service or repository
    4.10 return value as map in ajax client and append it to the select options
    4.11 Now select any supervisor
    4.12 Then click on change button,make a ajax call,get the studentId and new 
         supervisor id,and update the student suprvisor information in 'students' table
    4.13 Return ChangeSupervisorDTO back to jsp page
    4.14 Done

5. Dept. Admin can register student account in the system
    5.1 Add student form to Students page
    5.2 Add needed information
    5.3 Make Ajax call
    5.4 hit controller,service,repository
    5.5 Back that student from the controller to web page
6. Admin can Send Notice to respective User
    6.1 Creating Notice jsp page,notice.jsp-done
    6.2 Creating Notice.java domain object
    6.3 Creating a NoticeDTO in DTO package
    6.3 Creating a Method.GET method to set the NoticeDTO in model attribute in controller
    6.4 Create NoticeService bean in controller
    6.5 Make NoticeService interface,concrete implementation NoticeServiceImpl
    6.5 Make NoticeService bean available in the context
    6.6 Create NoticeRepository,NoticeRepositoryImpl
    6.7 Make bean available in the context,also define this bean at service class    
    6.8 Create saveNotice method,extract data from dto to domain object
    6.9 Create database table 'notices' and 'notice_reciever'
    6.10 IMplement the repository method save
    6.11 Done
    6.12 Sending email along with saving notice in database
      6.12.1 Help found on : https://www.baeldung.com/spring-email
    6.13 Provide maven dependency information in pom.xml
    6.14 Make JavaMailSender bean available in web application
    6.15 Create EmailService to service package
    6.16 Create EmailServiceImpl to serviceImpl package
    6.17 Make EmailService bean implementation available in the context
    6.18 Implement private static inner class to get JavaMailSender instance inside EmailServiceImpl
    6.19 Provided password hard-coded for now
    6.20 Done
    
7. Admin can read all the sent notice to users
    7.1 Click on sent link
    7.2 Onclick method will be called
    7.3 Controller call will be made
    7.4 Invoke notice controller
    7.5 Get the username from principal object,get the id from there using userService bean
    7.6 Create a user service,notice service bean
    7.7 Available those in bean context
    7.8 Make a notice repository bean inside notice serviceImpl class
    7.9 Available notice serviceImpl in bean context
    7.10 create read method in the repositoryImpl
    7.11 Available the jdbcTemplate bean in it.
    7.12 return the result in map
    7.13 show it in UI display
    7.14 done

8. Admin can view total students performance through graph
    8.1 Help link : https://canvasjs.com/spring-mvc-charts/pie-chart/ 
    8.1 Creating a jsp file that can load graph with students data,must import scripting library
    8.2 In controller create ChartService.java and its implementation and available the service bean in the 
        context
    8.3 Creating ChartRepository and its implementation,also available bean at web context.
    8.4 return result
    8.5 Done

Actor : Student
------------------
1. Student can see his profile information
2. Student can edit his profile information
    7.1 Mail,Name,department,Id can not be edited by a student
    7.2 Adding cellPhone,password attribute to the domain object
    7.3 Adding cellPhone,password column to the students table 
    7.4 Going to Repository class , mapping row mapper
    7.5 Creating Controller method,service method,repository method.
    7.6 Done
3.Student can see supervisor imformation
 3.1 Click on supervisor nav-link,
 3.2 Create a jsp page supervisor.jsp in student folder
 3.2 Going to student controller,get the supervisor from
     respective reposiroty,back the model object on view page.
     
4.Can submit project proposals to supervisor
*Click on project proposal tab/link
*create project proposal dto
*create a controller method that load proposal view
* from controller Retrieve the proposal if it already in database.
 -> create ProposalStatus enum
 -> populate its value at first
 -> depending on the value set the dto in model attribute
 
    * Create a jsp view for proposal to contain the project proposal information
        make input information field.
    * Create Service ProjectProposalService and its implementation
    * Make ProjectProposalService bean availableable at the context,also Autowired at 
        ProjectProposalService controller.
    * Make ProjectProposalRepository and its impl,add it to the context,autowired it in
        ServiceImpl class
    * creating table schema
        ->mysql schema
        CREATE TABLE project_proposals (
          tbl_id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY,
          student_id INTEGER,
          supervisor_id INTEGER,
          is_confirmed INTEGER,
          first_sent_time BIGINT,
          last_sent_time BIGINT,
          revisions INTEGER,
          supervisor_comment VARCHAR(200),
          project_title VARCHAR(100),
          project_for VARCHAR(100),
          project_doing_at VARCHAR(50),
          objective VARCHAR(200),
          technological_stacks VARCHAR(500),
          modules VARCHAR(200),
          actors VARCHAR(100),
          functional_requirements VARCHAR(1000)
        );
        ->Sample insert :
        INSERT INTO project_proposals(tbl_id,student_id,supervisor_id, is_confirmed,first_sent_time,
        last_sent_time,revisions, supervisor_comment, project_title,project_for,project_doing_at, 
        objective,technological_stacks,modules,actors,functional_requirements)VALUES
        (DEFAULT,15103111,99900,1,1111,11111,1,'Supervisor Comment','Practicum Management System',
        'IUBAT','Square Dots','To perform practicum activity through software','java,spring',
        'module','actors','functional_requirements');

5.Can submit log evaluation form,view the status
6.Can make report by selecting software process model,can update report continuously
7.Can read notice
8.Can chat with supervisor and with dept. Administrator
9.Can see the own performance dynamically

